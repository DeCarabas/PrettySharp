#ifndef LEXER_H
#define LEXER_H

enum TokenType {
  TOKEN_AMPERSAND,
  TOKEN_AMPERSAND_AMPERSAND,
  TOKEN_AMPERSAND_EQUALS,
  TOKEN_ASTERISK,
  TOKEN_ASTERISK_EQUALS,
  TOKEN_BAR,
  TOKEN_BAR_BAR,
  TOKEN_BAR_EQUALS,
  TOKEN_CARET,
  TOKEN_CARET_EQUALS,
  TOKEN_CHARACTER_LITERAL,
  TOKEN_CLOSEBRACE,
  TOKEN_CLOSEBRACKET,
  TOKEN_CLOSEPAREN,
  TOKEN_COLON,
  TOKEN_COLON_COLON,
  TOKEN_COMMA,
  TOKEN_DOT,
  TOKEN_DOT_DOT,
  TOKEN_EQUALS,
  TOKEN_EQUALS_EQUALS,
  TOKEN_EQUALS_GREATERTHAN,
  TOKEN_EXCLAMATION,
  TOKEN_EXCLAMATION_EQUALS,
  TOKEN_GREATERTHAN,
  TOKEN_GREATERTHAN_EQUALS,
  TOKEN_INTERPOLATED_STRING,
  TOKEN_INTERPOLATION_END,
  TOKEN_LESSTHAN,
  TOKEN_LESSTHAN_EQUALS,
  TOKEN_LESSTHAN_LESSTHAN,
  TOKEN_LESSTHAN_LESSTHAN_EQUALS,
  TOKEN_MINUS,
  TOKEN_MINUS_EQUALS,
  TOKEN_MINUS_GREATERTHAN,
  TOKEN_MINUS_MINUS,
  TOKEN_NUMERIC_LITERAL,
  TOKEN_OPENBRACE,
  TOKEN_OPENBRACKET,
  TOKEN_OPENPAREN,
  TOKEN_PERCENT,
  TOKEN_PERCENT_EQUALS,
  TOKEN_PLUS,
  TOKEN_PLUS_EQUALS,
  TOKEN_PLUS_PLUS,
  TOKEN_QUESTION,
  TOKEN_QUESTION_QUESTION,
  TOKEN_QUESTION_QUESTION_EQUALS,
  TOKEN_SEMICOLON,
  TOKEN_SLASH,
  TOKEN_SLASH_EQUAL,
  TOKEN_STRING_LITERAL,
  TOKEN_TILDE,

  TOKEN_TRIVIA_BLOCK_COMMENT,
  TOKEN_TRIVIA_EOL,
  TOKEN_TRIVIA_LINE_COMMENT,
  TOKEN_TRIVIA_WHITESPACE,

  TOKEN_KW_ABSTRACT,
  TOKEN_KW_AS,
  TOKEN_KW_BASE,
  TOKEN_KW_BOOL,
  TOKEN_KW_BREAK,
  TOKEN_KW_BYTE,
  TOKEN_KW_CASE,
  TOKEN_KW_CATCH,
  TOKEN_KW_CHAR,
  TOKEN_KW_CHECKED,
  TOKEN_KW_CLASS,
  TOKEN_KW_CONST,
  TOKEN_KW_CONTINUE,
  TOKEN_KW_DECIMAL,
  TOKEN_KW_DEFAULT,
  TOKEN_KW_DELEGATE,
  TOKEN_KW_DO,
  TOKEN_KW_DOUBLE,
  TOKEN_KW_ELSE,
  TOKEN_KW_ENUM,
  TOKEN_KW_EVENT,
  TOKEN_KW_EXPLICIT,
  TOKEN_KW_EXTERN,
  TOKEN_KW_FALSE,
  TOKEN_KW_FINALLY,
  TOKEN_KW_FIXED,
  TOKEN_KW_FLOAT,
  TOKEN_KW_FOR,
  TOKEN_KW_FOREACH,
  TOKEN_KW_GOTO,
  TOKEN_KW_IF,
  TOKEN_KW_IMPLICIT,
  TOKEN_KW_IN,
  TOKEN_KW_INT,
  TOKEN_KW_INTERFACE,
  TOKEN_KW_INTERNAL,
  TOKEN_KW_IS,
  TOKEN_KW_LOCK,
  TOKEN_KW_LONG,
  TOKEN_KW_NAMESPACE,
  TOKEN_KW_NEW,
  TOKEN_KW_NULL,
  TOKEN_KW_OBJECT,
  TOKEN_KW_OPERATOR,
  TOKEN_KW_OUT,
  TOKEN_KW_OVERRIDE,
  TOKEN_KW_PARAMS,
  TOKEN_KW_PRIVATE,
  TOKEN_KW_PROTECTED,
  TOKEN_KW_PUBLIC,
  TOKEN_KW_READONLY,
  TOKEN_KW_REF,
  TOKEN_KW_RETURN,
  TOKEN_KW_SBYTE,
  TOKEN_KW_SEALED,
  TOKEN_KW_SHORT,
  TOKEN_KW_SIZEOF,
  TOKEN_KW_STACKALLOC,
  TOKEN_KW_STATIC,
  TOKEN_KW_STRING,
  TOKEN_KW_STRUCT,
  TOKEN_KW_SWITCH,
  TOKEN_KW_THIS,
  TOKEN_KW_THROW,
  TOKEN_KW_TRUE,
  TOKEN_KW_TRY,
  TOKEN_KW_TYPEOF,
  TOKEN_KW_UINT,
  TOKEN_KW_ULONG,
  TOKEN_KW_UNCHECKED,
  TOKEN_KW_UNSAFE,
  TOKEN_KW_USHORT,
  TOKEN_KW_USING,
  TOKEN_KW_VIRTUAL,
  TOKEN_KW_VOID,
  TOKEN_KW_VOLATILE,
  TOKEN_KW_WHILE,

  TOKEN_IDENTIFIER,
  TOKEN_KW_ADD,
  TOKEN_KW_ALIAS,
  TOKEN_KW_ASCENDING,
  TOKEN_KW_ASYNC,
  TOKEN_KW_AWAIT,
  TOKEN_KW_BY,
  TOKEN_KW_DESCENDING,
  TOKEN_KW_DYNAMIC,
  TOKEN_KW_EQUALS,
  TOKEN_KW_FROM,
  TOKEN_KW_GET,
  TOKEN_KW_GLOBAL,
  TOKEN_KW_GROUP,
  TOKEN_KW_INTO,
  TOKEN_KW_JOIN,
  TOKEN_KW_LET,
  TOKEN_KW_NAMEOF,
  TOKEN_KW_ON,
  TOKEN_KW_ORDERBY,
  TOKEN_KW_PARTIAL,
  TOKEN_KW_REMOVE,
  TOKEN_KW_SELECT,
  TOKEN_KW_SET,
  TOKEN_KW_VALUE,
  TOKEN_KW_VAR,
  TOKEN_KW_WHEN,
  TOKEN_KW_WHERE,
  TOKEN_KW_YIELD,

  TOKEN_ERROR,
  TOKEN_EOF,
};

struct Token {
  enum TokenType type;
  const char *start;
  int length;
  int line;
};

void lexer_init(const char *source);
struct Token scan_token();

#endif
