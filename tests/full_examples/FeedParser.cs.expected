namespace OnceAndFuture.Syndication
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Security.Cryptography;
    using System.Text;
    using System.Xml.Linq;

    public enum FeedFormat
    {
        Unknown,
        RSS2,
        Atom,
        RDF
    }

    public class FeedParser
    {
        static readonly
        Dictionary<XName, Func<FeedSegment, XElement, FeedSegment>> FeedElements =
            new Dictionary<XName, Func<FeedSegment, XElement, FeedSegment>>
            {
                {
                    XNames.RSS.Title,
                    (rf, xe) =>
                        rf.With(feedTitle: SyndicationUtil.ParseBody(xe))
                },
                {
                    XNames.RSS10.Title,
                    (rf, xe) =>
                        rf.With(feedTitle: SyndicationUtil.ParseBody(xe))
                },
                {
                    XNames.Atom.Title,
                    (rf, xe) =>
                        rf.With(feedTitle: SyndicationUtil.ParseBody(xe))
                },
                {XNames.RSS.Link, (rf, xe) => rf.With(websiteUrl: xe.Value)},
                {XNames.RSS10.Link, (rf, xe) => rf.With(websiteUrl: xe.Value)},
                {XNames.Atom.Link, (rf, xe) => HandleAtomLink(rf, xe)},
                {
                    XNames.RSS.Description,
                    (rf, xe) =>
                        rf.With(feedDescription: SyndicationUtil.ParseBody(xe))
                },
                {
                    XNames.RSS10.Description,
                    (rf, xe) =>
                        rf.With(feedDescription: SyndicationUtil.ParseBody(xe))
                },
                {
                    XNames.RSS.Item,
                    (rf, xe) => rf.With(items: rf.Items.Add(LoadItem(xe)))
                },
                {
                    XNames.RSS10.Item,
                    (rf, xe) => rf.With(items: rf.Items.Add(LoadItem(xe)))
                },
                {
                    XNames.Atom.Entry,
                    (rf, xe) => rf.With(items: rf.Items.Add(LoadItem(xe)))
                },
            };
        static readonly
        Dictionary<XName, Func<Item, XElement, Item>> ItemElements =
            new Dictionary<XName, Func<Item, XElement, Item>>
            {
                {
                    XNames.RSS.Title,
                    (ri, xe) => ri.With(title: SyndicationUtil.ParseBody(xe))
                },
                {
                    XNames.RSS.Link,
                    (ri, xe) =>
                        ri.With(link: SyndicationUtil.ParseLink(xe.Value, xe))
                },
                {XNames.RSS.Description, (ri, xe) => ri.With(description: xe)},
                {XNames.RSS.Comments, (ri, xe) => ri.With(comments: xe.Value)},
                {XNames.RSS.PubDate, (ri, xe) => HandlePubDate(ri, xe)},
                {XNames.RSS.Guid, (ri, xe) => HandleGuid(ri, xe)},
                {XNames.RSS.Enclosure, (ri, xe) => HandleEnclosure(ri, xe)},
                {
                    XNames.RSS10.Title,
                    (ri, xe) => ri.With(title: SyndicationUtil.ParseBody(xe))
                },
                {
                    XNames.RSS10.Link,
                    (ri, xe) =>
                        ri.With(link: SyndicationUtil.ParseLink(xe.Value, xe))
                },
                {XNames.RSS10.Description, (ri, xe) => ri.With(description: xe)},
                {XNames.RSS10.Comments, (ri, xe) => ri.With(comments: xe.Value)},
                {XNames.RSS10.PubDate, (ri, xe) => HandlePubDate(ri, xe)},
                {XNames.RSS10.Guid, (ri, xe) => HandleGuid(ri, xe)},
                {XNames.Content.Encoded, (ri, xe) => ri.With(content: xe)},
                {
                    XNames.Atom.Title,
                    (ri, xe) => ri.With(title: SyndicationUtil.ParseBody(xe))
                },
                {XNames.Atom.Content, (ri, xe) => ri.With(content: xe)},
                {XNames.Atom.Summary, (ri, xe) => ri.With(summary: xe)},
                {XNames.Atom.Link, (ri, xe) => HandleAtomLink(ri, xe)},
                {XNames.Atom.Id, (ri, xe) => ri.With(id: xe.Value)},
                {XNames.Atom.Published, (ri, xe) => HandlePubDate(ri, xe)},
                {XNames.Atom.Updated, (ri, xe) => HandlePubDate(ri, xe)},
                {XNames.Media.Content, (ri, xe) => HandleThumbnail(ri, xe)},
            };

        public static FeedSegment ParseFeed(
            Uri feedUrl,
            XElement element,
            out FeedFormat format)
        {
            if (element.Name == XNames.RSS.Rss)
            {
                format = FeedFormat.RSS2;
                return LoadFeed(feedUrl, element.Element(XNames.RSS.Channel));
            }
            else if (element.Name == XNames.Atom.Feed)
            {
                format = FeedFormat.Atom;
                return LoadFeed(feedUrl, element);
            }
            else if (element.Name == XNames.RDF.Rdf)
            {
                format = FeedFormat.RDF;
                var result =
                    LoadFeed(feedUrl, element.Element(XNames.RSS10.Channel));
                return result.With(
                    items: result.Items.AddRange(
                        element.Elements(XNames.RSS10.Item).Select(
                            xe => LoadItem(xe)
                        )
                    )
                );
            }
            else
            {
                format = FeedFormat.Unknown;
                return null;
            }
        }

        static FeedSegment HandleAtomLink(FeedSegment feed, XElement link)
        {
            string rel = link.Attribute(XNames.Atom.Rel)?.Value ?? "alternate";
            string type =
                link.Attribute(XNames.Atom.Type)?.Value ?? "text/html";
            string href = link.Attribute(XNames.Atom.Href)?.Value;
            if (
                String.Equals(
                    rel,
                    "alternate",
                    StringComparison.OrdinalIgnoreCase
                ) &&
                type.StartsWith("text/html", StringComparison.OrdinalIgnoreCase)
            )
            {
                feed =
                    feed.With(
                        websiteUrl: link.Attribute(XNames.Atom.Href)?.Value
                    );
            }

            return feed;
        }

        static Item HandleAtomLink(Item item, XElement link)
        {
            string rel = link.Attribute(XNames.Atom.Rel)?.Value ?? "alternate";
            string type =
                link.Attribute(XNames.Atom.Type)?.Value ?? "text/html";
            string href = link.Attribute(XNames.Atom.Href)?.Value;
            if (
                String.Equals(
                    rel,
                    "alternate",
                    StringComparison.OrdinalIgnoreCase
                ) &&
                type.StartsWith("text/html", StringComparison.OrdinalIgnoreCase)
            )
            {
                item = item.With(link: SyndicationUtil.ParseLink(href, link));
            }

            if (
                String.Equals(rel, "self", StringComparison.OrdinalIgnoreCase) &&
                type.StartsWith("text/html", StringComparison.OrdinalIgnoreCase)
            )
            {
                item =
                    item.With(permaLink: SyndicationUtil.ParseLink(href, link));
            }

            if (link.Attribute(XNames.Atom.Rel)?.Value == "enclosure")
            {
                item =
                    item.With(
                        enclosures: item.Enclosures.Add(
                            new Enclosure(
                                length: link.Attribute(XNames.Atom.Length)?.Value,
                                type: type,
                                url: SyndicationUtil.ParseLink(href, link)
                            )
                        )
                    );
            }

            return item;
        }

        static Item HandleEnclosure(Item item, XElement element)
        {
            return item.With(
                enclosures: item.Enclosures.Add(
                    new Enclosure(
                        length: element.Attribute(XNames.RSS.Length)?.Value,
                        type: element.Attribute(XNames.RSS.Type)?.Value,
                        url: SyndicationUtil.ParseLink(
                            element.Attribute(XNames.RSS.Url)?.Value,
                            element
                        )
                    )
                )
            );
        }

        static Item HandleGuid(Item item, XElement element)
        {
            item = item.With(id: element.Value);
            if (
                item.Id.StartsWith(
                    "http://",
                    StringComparison.OrdinalIgnoreCase
                ) ||
                item.Id.StartsWith(
                    "https://",
                    StringComparison.OrdinalIgnoreCase
                )
            )
            {
                item =
                    item.With(
                        permaLink: SyndicationUtil.ParseLink(item.Id, element)
                    );
            }

            return item;
        }

        static Item HandlePubDate(Item item, XElement element)
        {
            DateTime? date = SyndicationUtil.ParseDate(element);
            if (date != null && (item.PubDate == null || date > item.PubDate))
            {
                return item.With(pubDate: date);
            }

            return item;
        }

        static Item HandleThumbnail(Item item, XElement element)
        {
            if (
                element.Name == XNames.Media.Content &&
                element.Attribute(XNames.Media.Medium)?.Value == "image"
            )
            {
                Uri url =
                    SyndicationUtil.TryParseUrl(
                        element.Attribute(XNames.Media.Url)?.Value,
                        null,
                        element
                    );
                int width, height;
                if (
                    url != null &&
                    Int32.TryParse(
                        element.Attribute(XNames.Media.Width)?.Value,
                        out width
                    ) &&
                    Int32.TryParse(
                        element.Attribute(XNames.Media.Height)?.Value,
                        out height
                    )
                )
                {
                    item =
                        item.With(thumbnail: new Thumbnail(url, width, height));
                }
            }

            return item;
        }

        static FeedSegment LoadFeed(Uri feedUrl, XElement item)
        {
            var rf = new FeedSegment(feedUrl: feedUrl);
            foreach (XElement xe in item.Elements())
            {
                Func<FeedSegment, XElement, FeedSegment> action;
                if (FeedElements.TryGetValue(xe.Name, out action))
                {
                    rf = action(rf, xe);
                }
            }

            if (String.IsNullOrWhiteSpace(rf.FeedTitle))
            {
                string title = null;
                if (!String.IsNullOrWhiteSpace(rf.FeedDescription))
                {
                    title = rf.FeedDescription;
                }
                else if (!String.IsNullOrWhiteSpace(rf.WebsiteUrl))
                {
                    title = rf.WebsiteUrl;
                }
                else if (rf.FeedUrl != null)
                {
                    title = rf.FeedUrl.AbsoluteUri;
                }

                rf = rf.With(feedTitle: title);
            }

            return rf;
        }

        static Item LoadItem(XElement item)
        {
            var ri = new Item();
            foreach (XElement xe in item.Elements())
            {
                Func<Item, XElement, Item> func;
                if (ItemElements.TryGetValue(xe.Name, out func))
                {
                    ri = func(ri, xe);
                }
            }

            // Load the body; prefer explicit summaries to "description", which is ambiguous, to "content", which is
            // explicitly intended to be the full entry content.
            if (ri.Summary != null)
            {
                ri = ri.With(body: SyndicationUtil.ParseBody(ri.Summary));
            }
            else if (ri.Description != null)
            {
                ri = ri.With(body: SyndicationUtil.ParseBody(ri.Description));
            }
            else if (ri.Content != null)
            {
                ri = ri.With(body: SyndicationUtil.ParseBody(ri.Content));
            }

            if (ri.PermaLink == null)
            {
                ri = ri.With(permaLink: ri.Link);
            }

            if (ri.Id == null)
            {
                ri = ri.With(id: CreateItemId(ri));
            }

            if (String.IsNullOrWhiteSpace(ri.Title))
            {
                string title = null;
                if (ri.PubDate != null)
                {
                    title = ri.PubDate.ToString();
                }
                else if (ri.PermaLink != null)
                {
                    title = ri.PermaLink.AbsoluteUri;
                }
                else if (ri.Id != null)
                {
                    title = ri.Id;
                }

                if (title != null)
                {
                    ri = ri.With(title: title);
                }
            }

            return ri;
        }

        static string CreateItemId(Item item)
        {
            var guid = "";
            if (item.PubDate != null)
            {
                guid += item.PubDate.ToString();
            }

            if (item.Link != null)
            {
                guid += item.Link;
            }

            if (item.Title != null)
            {
                guid += item.Title;
            }

            if (guid.Length > 0)
            {
                byte[] hash =
                    SHA1.Create().ComputeHash(Encoding.UTF8.GetBytes(guid));
                guid = Convert.ToBase64String(hash);
            }

            return guid;
        }
    }
}
